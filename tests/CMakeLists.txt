# Copyright 2025 Stanford University, NVIDIA Corporation
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#region Global Test Properties
set(TEST_RESOURCE_LOCK)
set(TEST_DEFAULT_ARGS)
set(TEST_ARGS
    ""
    CACHE STRING "Default arguments for tests"
)
set(TEST_LAUNCHER ${CMAKE_TEST_LAUNCHER})

if(NOT TEST_PROCESSORS)
  if(MPIEXEC_EXECUTABLE)
    set(TEST_PROCESSORS 2)
  else()
    set(TEST_PROCESSORS 1)
  endif()
endif()

if(MPIEXEC_EXECUTABLE)
  list(PREPEND TEST_LAUNCHER "${MPIEXEC_EXECUTABLE}" ${MPIEXEC_NUMPROC_FLAG} ${TEST_PROCESSORS}
       ${MPIEXEC_PREFLAGS}
  )
  list(APPEND TEST_RESOURCE_LOCK network)
endif()

if(REALM_USE_CUDA OR REALM_USE_HIP)
  list(APPEND TEST_RESOURCE_LOCK gpu)
  list(APPEND TEST_DEFAULT_ARGS -ll:gpu 1)
  set(TEST_USE_GPU TRUE)
  set(TEST_GPU_LIBS $<TARGET_NAME_IF_EXISTS:CUDA::cudart> $<TARGET_NAME_IF_EXISTS:hip::host>)
endif()

if(REALM_USE_KOKKOS AND REALM_USE_OPENMP)
  list(APPEND TEST_DEFAULT_ARGS -ll:ocpu 1 -ll:onuma 0)
endif()

if(NOT TEST_ARGS)
  set(TEST_ARGS ${TEST_DEFAULT_ARGS})
endif()

if(REALM_USE_PYTHON)
  list(APPEND TEST_ENV "REALM_PYTHON_LIB=$<TARGET_FILE:Python3::Python>")
endif()

if(REALM_USE_UCX)
  list(APPEND TEST_LIB_PATH "$<TARGET_FILE_DIR:realm_ucp_bootstrap_mpi>")
endif()
cmake_path(CONVERT "${TEST_LIB_PATH}" TO_NATIVE_PATH_LIST TEST_LIB_PATH NORMALIZE)
#endregion

# TODO(cperry): Move these tests to this directory
set(REALM_TEST_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
cmake_path(ABSOLUTE_PATH REALM_TEST_DIR BASE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}" NORMALIZE)

#region Unit Tests

cpmfindpackage(
  NAME
  googletest
  GIT_REPOSITORY
  https://github.com/google/googletest.git
  GIT_TAG
  v1.15.2
  EXCLUDE_FROM_ALL
  YES
  SYSTEM
  YES
  OPTIONS
  "INSTALL_GTEST OFF"
  "BUILD_SHARED_LIBS OFF"
)
if(googletest_ADDED)
  set_property(GLOBAL APPEND PROPERTY PACKAGES_FOUND googletest)
  get_property(_NOT_FOUND GLOBAL PROPERTY PACKAGES_NOT_FOUND)
  list(REMOVE_ITEM _NOT_FOUND googletest)
  set_property(GLOBAL PROPERTY PACKAGES_NOT_FOUND "${_NOT_FOUND}")
endif()

list(
  APPEND
  REALM_UNIT_TESTS
  auto_actmsg_test.cc
  fragmented_message_test.cc
  incoming_message_manager_test.cc
  memcpy_channel_test.cc
  comp_queue_test.cc
  event_test.cc
  path_cache_test.cc
  transfer_utils_test.cc
  address_list_test.cc
  cmdline_parser_test.cc
  sequence_assembler_test.cc
  dynamic_table_test.cc
  range_allocator_test.cc
  pri_queue_test.cc
  intrusive_list_test.cc
  repl_heap_test.cc
  nodeset_test.cc
  transfer_iterator_test.cc
  lowlevel_dma_test.cc
  circ_queue_test.cc
  gather_scatter_test.cc
  sparsity_map_test.cc
  addrsplit_channel_test.cc
  topology_test.cc
)
list(TRANSFORM REALM_UNIT_TESTS PREPEND "${REALM_TEST_DIR}/unit_tests/")
add_executable(realm_unit_tests ${REALM_UNIT_TESTS})
# Needed for designated initializers
# TODO(apriakhin): to be removed
target_compile_features(realm_unit_tests PUBLIC cxx_std_20)
target_link_libraries(
  realm_unit_tests PRIVATE realm_obj GTest::gmock_main ${REALM_LIBRARIES} ${REALM_EXTRA_OBJS}
)

# TODO(wei): To be merged into realm_unit_tests once runtime singleton is
# removed from all unit tests
list(
  APPEND
  REALM_C_UNIT_TESTS
  c_processor_query.cc
  c_memory_query.cc
  c_processor_attr.cc
  c_memory_attr.cc
  c_processor_task.cc
  c_event.cc
  c_inst.cc
  c_external_inst.cc
  c_inst_copy.cc
  c_runtime_version.cc
  c_runtime_attr.cc
  c_affinity.cc
)
list(TRANSFORM REALM_C_UNIT_TESTS PREPEND "${REALM_TEST_DIR}/unit_tests/")
add_executable(realm_c_unit_tests ${REALM_C_UNIT_TESTS})
# Needed for designated initializers
# TODO(apriakhin): to be removed
target_compile_features(realm_c_unit_tests PUBLIC cxx_std_20)
target_link_libraries(
  realm_c_unit_tests PRIVATE realm_obj GTest::gmock_main ${REALM_LIBRARIES} ${REALM_EXTRA_OBJS}
)

include(GoogleTest)
if((NOT REALM_SANITIZER OR REALM_SANITIZER STREQUAL "NONE")
   AND NOT WIN32
   AND NOT CMAKE_CROSSCOMPILING
)
  gtest_discover_tests(realm_unit_tests NO_PRETTY_TYPES NO_PRETTY_VALUES PROPERTIES LABELS "unit")
  gtest_discover_tests(realm_c_unit_tests NO_PRETTY_TYPES NO_PRETTY_VALUES PROPERTIES LABELS "unit")
else()
  add_test(NAME realm_unit_tests COMMAND $<TARGET_FILE:realm_unit_tests>)
  add_test(NAME realm_c_unit_tests COMMAND $<TARGET_FILE:realm_c_unit_tests>)
  set_tests_properties(realm_unit_tests realm_c_unit_tests PROPERTIES LABELS "unit")
endif()

if(REALM_SANITIZER STREQUAL "ASAN")
  # Disable leak checking on realm_unit_tests
  # TODO(apriakhin): fix this
  set_tests_properties(realm_unit_tests PROPERTIES ENVIRONMENT "ASAN_OPTIONS=detect_leaks=0")
endif()

if(REALM_ENABLE_COVERAGE)
  if(OPENCPPCOV_PATH)
    cmake_path(CONVERT ${PROJECT_SOURCE_DIR} TO_NATIVE_PATH_LIST NATIVE_SRC_DIR)
    cmake_path(CONVERT ${PROJECT_BINARY_DIR} TO_NATIVE_PATH_LIST NATIVE_BIN_DIR)
    add_custom_target(
      coverage
      COMMAND
        "${OPENCPPCOV_PATH}" "--export_type=cobertura:${NATIVE_BIN_DIR}\\coverage.xml"
        --cover_children --sources "${NATIVE_SRC_DIR}" --modules "${NATIVE_BIN_DIR}"
        --excluded_sources "${NATIVE_BIN_DIR}\\_deps" -- "${CMAKE_CTEST_COMMAND}" -T Test -T
        Coverage -L unit
      BYPRODUCTS coverage.xml
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
      DEPENDS realm_unit_tests realm_c_unit_tests VERBATIUM
      COMMENT "Running opencppcoverage to produce Cobertura coverage report"
    )
    # Show info where to find the report
    add_custom_command(
      TARGET coverage
      POST_BUILD
      COMMAND ;
      COMMENT "Cobertura coverage report saved in ${PROJECT_BINARY_DIR}/coverage.xml"
    )
  else()
    set(CODE_COVERAGE_VERBOSE TRUE)
    set(GCOVR_ADDITIONAL_ARGS "-j")
    append_coverage_compiler_flags_to_target(realm_unit_tests)
    append_coverage_compiler_flags_to_target(realm_c_unit_tests)
    # TODO(cperry): fix base directory when sources are moved over
    setup_target_for_coverage_gcovr_xml(
      NAME
      coverage
      EXECUTABLE
      "${CMAKE_CTEST_COMMAND}"
      -T
      Test
      -T
      Coverage
      -L
      unit
      DEPENDENCIES
      realm_unit_tests
      realm_c_unit_tests
      BASE_DIRECTORY
      "${REALM_TEST_DIR}/../.."
      EXCLUDE
      "${PROJECT_BINARY_DIR}/*"
      "${REALM_TEST_DIR}/*"
    )
  endif()
endif()

#endregion

#region Integration Tests
set(_integ_list)

# Given target and list of sources, compiles the executable and adds it as a test, with the default benchmark arguments
# TODO(cperry): make a cmake script that will allow to override test arguments at runtime
macro(add_integration_test target)
  add_executable(${target} ${ARGN})
  if(REALM_USE_HIP)
    set(SRC_LIST ${ARGN})
    list(FILTER SRC_LIST INCLUDE REGEX "\.cu")
    list(TRANSFORM SRC_LIST REPLACE ".*:(.*\.cu)>" "\\1")
    set_source_files_properties(${SRC_LIST} PROPERTIES LANGUAGE HIP)
  endif()
  target_link_libraries(${target} Realm::Realm)
  add_test(NAME ${target} COMMAND $<TARGET_FILE:${target}> ${${target}_ARGS})
  set_property(
    TEST ${target} PROPERTY RESOURCE_LOCK $<REMOVE_DUPLICATES:${TEST_RESOURCE_LOCK}
                            ${${target}_RESOURCE_LOCK}>
  )
  if(REALM_USE_UCX)
    add_dependencies(${target} realm_ucp_bootstrap_mpi)
  endif()
  list(APPEND _integ_list ${target})
endmacro()

add_integration_test(version_check "${REALM_TEST_DIR}/version_check.cc")
add_integration_test(serializing "${REALM_TEST_DIR}/serializing.cc")
set(ctxswitch_ARGS -ll:io 1 -t 30 -i 10000)
add_integration_test(ctxswitch "${REALM_TEST_DIR}/ctxswitch.cc")
add_integration_test(barrier_reduce "${REALM_TEST_DIR}/barrier_reduce.cc")
add_integration_test(taskreg "${REALM_TEST_DIR}/taskreg.cc")
add_integration_test(idcheck "${REALM_TEST_DIR}/idcheck.cc")
add_integration_test(inst_reuse "${REALM_TEST_DIR}/inst_reuse.cc")
set(transpose_ARGS -unit_test 1) # Run short test
add_integration_test(transpose "${REALM_TEST_DIR}/transpose.cc")
set(proc_group_ARGS -ll:cpu 4)
add_integration_test(proc_group "${REALM_TEST_DIR}/proc_group.cc")
add_integration_test(deppart "${REALM_TEST_DIR}/deppart.cc")
set(scatter_ARGS -p1 2 -p2 2)
add_integration_test(scatter "${REALM_TEST_DIR}/scatter.cc")
set(proc_group_ARGS -ll:cpu 4)
add_integration_test(event_subscribe "${REALM_TEST_DIR}/event_subscribe.cc")
set(compqueue_ARGS -ll:cpu 4 -timeout 120)
add_integration_test(compqueue "${REALM_TEST_DIR}/compqueue.cc")
add_integration_test(test_nodeset "${REALM_TEST_DIR}/test_nodeset.cc")
add_integration_test(subgraphs "${REALM_TEST_DIR}/subgraphs.cc")
add_integration_test(large_tls "${REALM_TEST_DIR}/large_tls.cc")
add_integration_test(memmodel "${REALM_TEST_DIR}/memmodel.cc")
add_integration_test(coverings "${REALM_TEST_DIR}/coverings.cc")
set(alltoall_ARGS -ll:csize 1024)
add_integration_test(alltoall "${REALM_TEST_DIR}/alltoall.cc")
add_integration_test(realm_reinit "${REALM_TEST_DIR}/realm_reinit.cc")
set(sparse_construct_ARGS -verbose)
add_integration_test(sparse_construct "${REALM_TEST_DIR}/sparse_construct.cc")
add_integration_test(extres_alias "${REALM_TEST_DIR}/extres_alias.cc")
add_integration_test(reservations "${REALM_TEST_DIR}/reservations.cc")
set(machine_config_test_ARGS
    -test_args
    1
    -ll:cpu
    4
    -ll:util
    2
    -ll:io
    1
    -ll:csize
    16
    -ll:stacksize
    4
    -ll:pin_util
    1
    -ll:ext_sysmem
    0
    -ll:rsize
    2
    -ll:nsize
    2
    -ll:ncsize
    1
    -ll:ncpu
    1
    -numa:pin
)
if(TEST_USE_GPU)
  list(
    APPEND
    machine_config_test_ARGS
    -ll:gpu
    1
    -ll:fsize
    1024
    -ll:zsize
    8
    -ll:ib_fsize
    16
    -ll:ib_zsize
    32
    -ll:msize
    64
    -ll:streams
    2
    -ll:d2d_streams
    2
  )
  if(REALM_USE_CUDA)
    list(APPEND machine_config_test_ARGS -cuda:dynfb 1 -cuda:dynfb_max 128)
  endif()
  if(REALM_USE_HIP)
    list(APPEND machine_config_test_ARGS -hip:dynfb 1 -hip:dynfb_max 128)
  endif()
endif()
if(REALM_USE_OPENMP)
  list(
    APPEND
    machine_config_test_ARGS
    -ll:ocpu
    1
    -ll:othr
    2
    -ll:onuma
    0
    -ll:ostack
    4
  )
endif()
if(REALM_USE_PYTHON)
  list(APPEND machine_config_test_ARGS -ll:py 1 -ll:pystack 4)
endif()
add_integration_test(machine_config_test "${REALM_TEST_DIR}/machine_config_test.cc")
add_integration_test(rsrv_acquire_poisoned "${REALM_TEST_DIR}/rsrv_acquire_poisoned.cc")
add_integration_test(refcount_image_test "${REALM_TEST_DIR}/refcount_image_test.cc")
set(inst_chain_redistrict_ARGS -i 2)
add_integration_test(inst_chain_redistrict "${REALM_TEST_DIR}/inst_chain_redistrict.cc")
add_integration_test(refcount_preimage_test "${REALM_TEST_DIR}/refcount_preimage_test.cc")
add_integration_test(
  test_profiling "${REALM_TEST_DIR}/test_profiling.cc"
  "$<$<BOOL:TEST_USE_GPU>:${REALM_TEST_DIR}/test_profiling_gpu.cu>"
)
add_integration_test(
  memspeed "${REALM_TEST_DIR}/memspeed.cc"
  "$<$<BOOL:TEST_USE_GPU>:${REALM_TEST_DIR}/memspeed_gpu.cu>"
)
target_link_libraries(memspeed ${TEST_GPU_LIBS})
set(simple_reduce_ARGS -all)
if(NOT BUILD_SHARED_LIBS OR NOT REALM_ENABLE_HIP)
  # simple_reduce registers a kernel with the runtime, but uses a different instance of the runtime
  # than in librealm.so, which causes an "invalid device function" error.  This has been solved in
  # the CUDA module, not the HIP module yet.
  add_integration_test(
    simple_reduce "${REALM_TEST_DIR}/simple_reduce.cc"
    "$<$<BOOL:TEST_USE_GPU>:${REALM_TEST_DIR}/simple_reduce_gpu.cu>"
  )
endif()
add_integration_test(
  multiaffine "${REALM_TEST_DIR}/multiaffine.cc"
  "$<$<BOOL:TEST_USE_GPU>:${REALM_TEST_DIR}/multiaffine_gpu.cu>"
)
target_link_libraries(multiaffine ${TEST_GPU_LIBS})
if(TEST_USE_GPU)
  if(REALM_USE_CUDA)
    set(cuda_memcpy_test_ARGS
        -ll:gpu
        1
        -sparse
        64
        -gap
        0
        -chunks
        32
        -test-sparse
        -rects
        8
        -verify
    )
    set(cuda_memcpy_test_RESOURCE_LOCK gpu)
    add_integration_test(cuda_memcpy_test "${REALM_TEST_DIR}/cuda_memcpy_test.cc")
    set(cuda_scatter_test_ARGS -ll:gpu 1)
    set(cuda_scatter_test_RESOURCE_LOCK gpu)
    add_integration_test(cuda_scatter_test "${REALM_TEST_DIR}/cuda_scatter_test.cc")
    set(test_cuhook_ARGS -ll:gpu 1)
    set(test_cuhook_RESOURCE_LOCK gpu)
    add_integration_test(
      test_cuhook "${REALM_TEST_DIR}/test_cuhook.cc" "${REALM_TEST_DIR}/test_cuhook_gpu.cu"
    )
    target_link_libraries(cuda_memcpy_test CUDA::cudart)
    target_link_libraries(cuda_scatter_test CUDA::cudart)
    target_link_libraries(test_cuhook CUDA::cudart)
  endif()
  set(transpose_test_gpu_ARGS -ll:gpu 1)
  set(transpose_test_gpu_RESOURCE_LOCK gpu)
  add_integration_test(transpose_test_gpu "${REALM_TEST_DIR}/transpose_test_gpu.cc")
  target_link_libraries(transpose_test_gpu ${TEST_GPU_LIBS})
  set(task_stream_ARGS -ll:gpu 1)
  set(task_stream_RESOURCE_LOCK gpu)
  add_integration_test(
    task_stream "${REALM_TEST_DIR}/task_stream.cc" "${REALM_TEST_DIR}/task_stream_gpu.cu"
  )
  target_link_libraries(task_stream ${TEST_GPU_LIBS})
endif()

#### C API tests
add_integration_test(c_runtime "${REALM_TEST_DIR}/c/test_runtime.cc")
add_integration_test(c_processor_query "${REALM_TEST_DIR}/c/test_processor_query.cc")
add_integration_test(c_memory_query "${REALM_TEST_DIR}/c/test_memory_query.cc")
add_integration_test(c_event "${REALM_TEST_DIR}/c/test_event.cc")
add_integration_test(c_inst "${REALM_TEST_DIR}/c/test_c_inst.cc")
# TODO(weiwu): designated initializers require c++20, should be removed
target_compile_features(c_inst PUBLIC cxx_std_20)

add_integration_test(c_external_inst "${REALM_TEST_DIR}/c/test_c_external_inst.cc")
# TODO(weiwu): test crashes on windows
if(WIN32)
  set_property(TEST c_external_inst PROPERTY DISABLED TRUE)
endif()
# TODO(weiwu): designated initializers require c++20, should be removed
target_compile_features(c_external_inst PUBLIC cxx_std_20)
target_link_libraries(c_external_inst ${TEST_GPU_LIBS})

add_integration_test(c_event_poisoned "${REALM_TEST_DIR}/c/test_event_poisoned.cc")

target_link_libraries(
  machine_config_test ${TEST_GPU_LIBS} $<TARGET_NAME_IF_EXISTS:CUDA::cuda_driver>
)
target_link_libraries(test_profiling ${TEST_GPU_LIBS})
if(REALM_USE_LIBDL)
  target_link_libraries(taskreg ${CMAKE_DL_LIBS})
endif()

# These executables use global registration and require -rdynamic to be set in order to retrieve the symbol name and offset
set_target_properties(taskreg PROPERTIES ENABLE_EXPORTS TRUE)
set_target_properties(scatter PROPERTIES ENABLE_EXPORTS TRUE)
if(REALM_USE_CUDA)
  set_target_properties(cuda_scatter_test PROPERTIES ENABLE_EXPORTS TRUE)
endif()

set_tests_properties(
  ${_integ_list}
  PROPERTIES TEST_LAUNCHER
             "${TEST_LAUNCHER}"
             PROCESSORS
             ${TEST_PROCESSORS}
             ENVIRONMENT
             "${TEST_ENV}"
             LABELS
             "integration"
)

string(REPLACE ";" " " TEST_ARGS "${TEST_ARGS}")

if(MSVC)
  set_tests_properties(
    ${_integ_list}
    PROPERTIES
      ENVIRONMENT_MODIFICATION
      "REALM_DEFAULT_ARGS=string_prepend:${TEST_ARGS} ;PATH=path_list_append:${TEST_LIB_PATH}"
  )
else()
  set_tests_properties(
    ${_integ_list}
    PROPERTIES
      ENVIRONMENT_MODIFICATION
      "REALM_DEFAULT_ARGS=string_prepend:${TEST_ARGS} ;LD_LIBRARY_PATH=path_list_append:${TEST_LIB_PATH}"
  )
endif()

#endregion

add_custom_target(
  check
  DEPENDS ${_integ_list} realm_unit_tests realm_c_unit_tests
  COMMAND ${CMAKE_CTEST_COMMAND} -j --output-on-failure
)
